---NodeJS Fundamentals------------------

* Read-Evaluate-Print-Line & Hello.
REPL = Read-Evaluate-Print-Line
    Allows you playing around in JS.

> .load jsfile.js
> now you can call functions from jsfile.js

---Hello Routing! | Handling GET Requests---

http://localhost:3000/api/getinfo?prod=jeans&color=red

Applying above link to this code yields.

BasicRouter.js
    'use strict';

    const http = require('http');
    const url = require('url');

    function router(req, res) {
        let baseURI = url.parse(req.url, true);
        console.log('Request route: ', baseURI);
        res.writeHead(200, {'Content-type': 'text/html'});
        res.end('<h1>Hello Router</h1>');
    }

    http.createServer(router).listen(3000, () => console.log('Server running on port 3000.'));

AllAboutNodejs$ node BasicRouter.js 
Server running on port 3000.
Request route:  Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?prod=jeans&color=red',
  query: { prod: 'jeans', color: 'red' },
  pathname: '/api/getinfo',
  path: '/api/getinfo?prod=jeans&color=red',
  href: '/api/getinfo?prod=jeans&color=red' }

If you provide the same key with different values you get a useful array format.

http://localhost:3000/api/getinfo?color=red&color=green

Request route:  Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?color=red&color=green',
  query: { color: [ 'red', 'green' ] }, <--- NICE ARRAY
  pathname: '/api/getinfo',
  path: '/api/getinfo?color=red&color=green',
  href: '/api/getinfo?color=red&color=green' }

Need a way to store routes and corresponding handler functions that they should run.
Since req.method returns uppercase string dont forget to make the keys in routes uppercase.

Here is snippets of incoming request console.log(req)

    headers: 
    { host: 'localhost:3000',
        connection: 'keep-alive',
        'cache-control': 'max-age=0',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36',
        accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'accept-encoding': 'gzip, deflate, sdch, br',
        'accept-language': 'en-US,en;q=0.8',
        cookie: 'session=eyJwYXNzcG9ydCI6eyJ1c2VyIjoiNWEzNDQwNjJkMGY5NDcyNmQzNGRhOWVmIn19; session.sig=zSHg8azzv4PkglBGsfWsvblCnUs' },

    method: 'GET'

---Hello Routing! | Handling POST Requests---

In Postman under Body section x-wwww-form-urlencoded means that it simulates a login form that allows you to submit username and password to our server.
It will format to come in like this

    username=johndoe&password=mrrobot

To upload a file(or image) in postman change from x-wwww-form-urlencoded to binary.
All we have just completed in BasicRouter.js can also be done with Express.

---Building a Web Server | Basic--- (Static Webserver)

Serving static files

---Promise me you'll never callback---
---Built a Web Server | Using Streams---

The fs.readfile() reads and buffers up every file into memory(meaning everything) 
before flushing it out in a response. There is no Flow Control to tell buffer to
stop taking in more data due to something else choking CPU/memory! This is bad
for concurrent users reading a file. 

Solution:  Nodejs gives us streams!. Data is not read all at once. It is read in
small chunks and piped out...this is Flow control!!. Because it's being read in 
chunk-by-chunk it doesnt need to sit in memory and get's piped out.

---Modules & NPM---

qrgen$ npm init
qrgen$ node qr.js "http://www.npmjs.com" "npmQRCode.png"

You can then scan from your mobile phone.

---Modules---

Task:  A module that encrypts and descrypts text strings using the AES-256 
encryption algorithm.

encode("Don't panic") -> baef283275a0dbf19b480e3b
decode("baef283275a0dbf19b480e3b") -> Dont' panic!

module.exports can be used to export functions, objects, and even properties and 
variables.

---MongoDB 101------------------
---Introduction to MongoDB---

The Problem with RDMS.
    - Data Storage & Processing is exponentially growing.
    - Doesn't scale well in a modern Big Data environment.
    - The Rigid Schema doesn't fit into a modern flexible dev environment.

mongoDB is NoSchema based. In other words its Schema is flexible see pic.

{upsert: true} will create the document you are trying to update if it does not exist.

> show dbs
TodoApp      0.000GB
TodoAppTest  0.000GB
admin        0.000GB
local        0.000GB
mean2        0.000GB
mean3        0.000GB
meanhotel    0.000GB
meantest     0.000GB
test         0.000GB
> use mailingList
switched to db mailingList
> show collections
> db.users.insert({"name": "John Doe", "email": "john@somemail.com"})
WriteResult({ "nInserted" : 1 })
> show collections
users
> db.users.insert({"name": "Ed Dillinger", "email": "ed@encom.com"})
WriteResult({ "nInserted" : 1 })
> db.users.find()
{ "_id" : ObjectId("5a8c6a837792a1afa9326990"), "name" : "John Doe", "email" : "john@somemail.com" }
{ "_id" : ObjectId("5a8c6ab27792a1afa9326991"), "name" : "Ed Dillinger", "email" : "ed@encom.com" }
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com"
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
> db.users.insert({"name": "Kevin Flynn", "email": "kevin@encom.com", "phone": 9029283})
WriteResult({ "nInserted" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com"
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
> db.users.update({"name": "John Doe"}, {$set: {"phone": 8782348342}}, {upsert: true})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com",
	"phone" : 8782348342
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
> db.users.update({"name": "Jairo Hernandez"}, {$set: {"phone": 2814376917}}, {upsert: true})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 1,
	"nModified" : 0,
	"_id" : ObjectId("5a8c6cc3e5d97f13d3120462")
})
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com",
	"phone" : 8782348342
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
{
	"_id" : ObjectId("5a8c6cc3e5d97f13d3120462"),
	"name" : "Jairo Hernandez",
	"phone" : 2814376917
}
> db.users.remove({"name": "Jairo Hernandez"})
WriteResult({ "nRemoved" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com",
	"phone" : 8782348342
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
> show dbs
TodoApp      0.000GB
TodoAppTest  0.000GB
admin        0.000GB
local        0.000GB
mailingList  0.000GB
mean2        0.000GB
mean3        0.000GB
meanhotel    0.000GB
meantest     0.000GB
test         0.000GB
> show collections
users
> db.dropDatabase()
{ "dropped" : "mailingList", "ok" : 1 }
> show dbs
TodoApp      0.000GB
TodoAppTest  0.000GB
admin        0.000GB
local        0.000GB
mean2        0.000GB
mean3        0.000GB
meanhotel    0.000GB
meantest     0.000GB
test         0.000GB
> exit


---NodeJS Frameworks------------------
---What are frameworks?---

Traits of a good framework:

Routing.
Sessions.
View Rendering.
Authentication.
Database I/O
Websockets(not a necessity in many apps or APIs.)
    - By nature HTTP is stateless meaning once data is served to user the connection is severed
    and does not persist.
    - Traditional web chats required constant polling of the parties talking, which was inefficient
    and slow. This is where websockets shines. It's like a phone call where you can talk freely
    in both directions without having to reconnecting after every sentence. Real-time network apps.
    Writing such a real-time app was a pain in PHP.
Logging.
    Can be written to console or 3rd party log server.

---Express and the MEAN Stack---

Express is best known for doing middleware.

---Beyond the MEAN Stack---

Hapi allows you to tie in multiple apps together. You can upgrade or modify one without affecting
all the other apps(see diagram).

Sails is one stack short of a full framework. You can choose whatever client side stack you want
like Angular/REACT/Ember.

Just remember that all NodeJS frameworks are client side agnostic meaning it allows freedom to use
whatever u like.

---ChatCAT - Creating a Realtime Multiroom Chat App & Deploying it on Heroku------------------
---The Goal---

- Build a production ready NodeJS app -- A Multiroom Realtime Chat Server.
- Structuring a NodeJS app.
- Using the Express framework.
    - Implement routing.
    - Implement custom middleware.
    - Implement sessions.
    - Implement logging.
- Use MongoDB-as-a-service through MongoLab.com.
- Use websockets using Socket.io.
- Implement Social Authentication using Facebook & Twitter.
- Deploy on cloud to Heroku.
- Use ES6 features.

---Structuring the App---

Express is not an opinionated framework, which means it does not force a strict application 
architecture on you.

---Installing nodemon---

$ npm install -g nodemon

---npm init and here we go---

$ npm  init
package name: (chatcat) <-- Cannot use uppercase or spaces.
keywords: <-- Makes package searchable on public repository.
license: (ISC) <-- Can be MIT, GNU, Apache, GPL.

Since we are not building a reusable module remove this line.

package.json
    "main": "index.js",

otherwise you will get this error.

    jairomh@ubuntu64-DevOps:~/WORK/AllAboutNodejs/chatcat$ nodemon
    [nodemon] 1.11.0
    [nodemon] to restart at any time, enter `rs`
    [nodemon] watching: *.*
    [nodemon] starting `node index.js`
    module.js:341
        throw err;
        ^

    Error: Cannot find module '/home/jairomh/WORK/AllAboutNodejs/chatcat/index.js'
        at Function.Module._resolveFilename (module.js:339:15)
        at Function.Module._load (module.js:290:25)
        at Function.Module.runMain (module.js:447:10)
        at startup (node.js:139:18)
        at node.js:999:3
    [nodemon] app crashed - waiting for file changes before starting...
