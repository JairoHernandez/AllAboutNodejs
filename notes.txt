---NodeJS Fundamentals------------------

* Read-Evaluate-Print-Line & Hello.
REPL = Read-Evaluate-Print-Line
    Allows you playing around in JS.

> .load jsfile.js
> now you can call functions from jsfile.js

---Hello Routing! | Handling GET Requests---

http://localhost:3000/api/getinfo?prod=jeans&color=red

Applying above link to this code yields.

BasicRouter.js
    'use strict';

    const http = require('http');
    const url = require('url');

    function router(req, res) {
        let baseURI = url.parse(req.url, true);
        console.log('Request route: ', baseURI);
        res.writeHead(200, {'Content-type': 'text/html'});
        res.end('<h1>Hello Router</h1>');
    }

    http.createServer(router).listen(3000, () => console.log('Server running on port 3000.'));

AllAboutNodejs$ node BasicRouter.js 
Server running on port 3000.
Request route:  Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?prod=jeans&color=red',
  query: { prod: 'jeans', color: 'red' },
  pathname: '/api/getinfo',
  path: '/api/getinfo?prod=jeans&color=red',
  href: '/api/getinfo?prod=jeans&color=red' }

If you provide the same key with different values you get a useful array format.

http://localhost:3000/api/getinfo?color=red&color=green

Request route:  Url {
  protocol: null,
  slashes: null,
  auth: null,
  host: null,
  port: null,
  hostname: null,
  hash: null,
  search: '?color=red&color=green',
  query: { color: [ 'red', 'green' ] }, <--- NICE ARRAY
  pathname: '/api/getinfo',
  path: '/api/getinfo?color=red&color=green',
  href: '/api/getinfo?color=red&color=green' }

Need a way to store routes and corresponding handler functions that they should run.
Since req.method returns uppercase string dont forget to make the keys in routes uppercase.

Here is snippets of incoming request console.log(req)

    headers: 
    { host: 'localhost:3000',
        connection: 'keep-alive',
        'cache-control': 'max-age=0',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.76 Safari/537.36',
        accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'accept-encoding': 'gzip, deflate, sdch, br',
        'accept-language': 'en-US,en;q=0.8',
        cookie: 'session=eyJwYXNzcG9ydCI6eyJ1c2VyIjoiNWEzNDQwNjJkMGY5NDcyNmQzNGRhOWVmIn19; session.sig=zSHg8azzv4PkglBGsfWsvblCnUs' },

    method: 'GET'

---Hello Routing! | Handling POST Requests---

In Postman under Body section x-wwww-form-urlencoded means that it simulates a login form that allows you to submit username and password to our server.
It will format to come in like this

    username=johndoe&password=mrrobot

To upload a file(or image) in postman change from x-wwww-form-urlencoded to binary.
All we have just completed in BasicRouter.js can also be done with Express.

---Building a Web Server | Basic--- (Static Webserver)

Serving static files

---Promise me you'll never callback---
---Built a Web Server | Using Streams---

The fs.readfile() reads and buffers up every file into memory(meaning everything) 
before flushing it out in a response. There is no Flow Control to tell buffer to
stop taking in more data due to something else choking CPU/memory! This is bad
for concurrent users reading a file. 

Solution:  Nodejs gives us streams!. Data is not read all at once. It is read in
small chunks and piped out...this is Flow control!!. Because it's being read in 
chunk-by-chunk it doesnt need to sit in memory and get's piped out.

---Modules & NPM---

qrgen$ npm init
qrgen$ node qr.js "http://www.npmjs.com" "npmQRCode.png"

You can then scan from your mobile phone.

---Modules---

Task:  A module that encrypts and descrypts text strings using the AES-256 
encryption algorithm.

encode("Don't panic") -> baef283275a0dbf19b480e3b
decode("baef283275a0dbf19b480e3b") -> Dont' panic!

module.exports can be used to export functions, objects, and even properties and 
variables.

---MongoDB 101------------------
---Introduction to MongoDB---

The Problem with RDMS.
    - Data Storage & Processing is exponentially growing.
    - Doesn't scale well in a modern Big Data environment.
    - The Rigid Schema doesn't fit into a modern flexible dev environment.

mongoDB is NoSchema based. In other words its Schema is flexible see pic.

{upsert: true} will create the document you are trying to update if it does not exist.

> show dbs
TodoApp      0.000GB
TodoAppTest  0.000GB
admin        0.000GB
local        0.000GB
mean2        0.000GB
mean3        0.000GB
meanhotel    0.000GB
meantest     0.000GB
test         0.000GB
> use mailingList
switched to db mailingList
> show collections
> db.users.insert({"name": "John Doe", "email": "john@somemail.com"})
WriteResult({ "nInserted" : 1 })
> show collections
users
> db.users.insert({"name": "Ed Dillinger", "email": "ed@encom.com"})
WriteResult({ "nInserted" : 1 })
> db.users.find()
{ "_id" : ObjectId("5a8c6a837792a1afa9326990"), "name" : "John Doe", "email" : "john@somemail.com" }
{ "_id" : ObjectId("5a8c6ab27792a1afa9326991"), "name" : "Ed Dillinger", "email" : "ed@encom.com" }
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com"
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
> db.users.insert({"name": "Kevin Flynn", "email": "kevin@encom.com", "phone": 9029283})
WriteResult({ "nInserted" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com"
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
> db.users.update({"name": "John Doe"}, {$set: {"phone": 8782348342}}, {upsert: true})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com",
	"phone" : 8782348342
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
> db.users.update({"name": "Jairo Hernandez"}, {$set: {"phone": 2814376917}}, {upsert: true})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 1,
	"nModified" : 0,
	"_id" : ObjectId("5a8c6cc3e5d97f13d3120462")
})
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com",
	"phone" : 8782348342
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
{
	"_id" : ObjectId("5a8c6cc3e5d97f13d3120462"),
	"name" : "Jairo Hernandez",
	"phone" : 2814376917
}
> db.users.remove({"name": "Jairo Hernandez"})
WriteResult({ "nRemoved" : 1 })
> db.users.find().pretty()
{
	"_id" : ObjectId("5a8c6a837792a1afa9326990"),
	"name" : "John Doe",
	"email" : "john@somemail.com",
	"phone" : 8782348342
}
{
	"_id" : ObjectId("5a8c6ab27792a1afa9326991"),
	"name" : "Ed Dillinger",
	"email" : "ed@encom.com"
}
{
	"_id" : ObjectId("5a8c6b1d7792a1afa9326992"),
	"name" : "Kevin Flynn",
	"email" : "kevin@encom.com",
	"phone" : 9029283
}
> show dbs
TodoApp      0.000GB
TodoAppTest  0.000GB
admin        0.000GB
local        0.000GB
mailingList  0.000GB
mean2        0.000GB
mean3        0.000GB
meanhotel    0.000GB
meantest     0.000GB
test         0.000GB
> show collections
users
> db.dropDatabase()
{ "dropped" : "mailingList", "ok" : 1 }
> show dbs
TodoApp      0.000GB
TodoAppTest  0.000GB
admin        0.000GB
local        0.000GB
mean2        0.000GB
mean3        0.000GB
meanhotel    0.000GB
meantest     0.000GB
test         0.000GB
> exit


---NodeJS Frameworks------------------
---What are frameworks?---

Traits of a good framework:

Routing.
Sessions.
View Rendering.
Authentication.
Database I/O
Websockets(not a necessity in many apps or APIs.)
    - By nature HTTP is stateless meaning once data is served to user the connection is severed
    and does not persist.
    - Traditional web chats required constant polling of the parties talking, which was inefficient
    and slow. This is where websockets shines. It's like a phone call where you can talk freely
    in both directions without having to reconnecting after every sentence. Real-time network apps.
    Writing such a real-time app was a pain in PHP.
Logging.
    Can be written to console or 3rd party log server.

---Express and the MEAN Stack---

Express is best known for doing middleware.

---Beyond the MEAN Stack---

Hapi allows you to tie in multiple apps together. You can upgrade or modify one without affecting
all the other apps(see diagram).

Sails is one stack short of a full framework. You can choose whatever client side stack you want
like Angular/REACT/Ember.

Just remember that all NodeJS frameworks are client side agnostic meaning it allows freedom to use
whatever u like.

---ChatCAT - Creating a Realtime Multiroom Chat App & Deploying it on Heroku------------------
---The Goal---

- Build a production ready NodeJS app -- A Multiroom Realtime Chat Server.
- Structuring a NodeJS app.
- Using the Express framework.
    - Implement routing.
    - Implement custom middleware.
    - Implement sessions.
    - Implement logging.
- Use MongoDB-as-a-service through MongoLab.com.
- Use websockets using Socket.io.
- Implement Social Authentication using Facebook & Twitter.
- Deploy on cloud to Heroku.
- Use ES6 features.

---Structuring the App---

Express is not an opinionated framework, which means it does not force a strict application 
architecture on you.

---Installing nodemon---

$ npm install -g nodemon

---npm init and here we go---

$ npm  init
package name: (chatcat) <-- Cannot use uppercase or spaces.
keywords: <-- Makes package searchable on public repository.
license: (ISC) <-- Can be MIT, GNU, Apache, GPL.

Since we are not building a reusable module remove this line.

package.json
    "main": "index.js",

otherwise you will get this error.

    jairomh@ubuntu64-DevOps:~/WORK/AllAboutNodejs/chatcat$ nodemon
    [nodemon] 1.11.0
    [nodemon] to restart at any time, enter `rs`
    [nodemon] watching: *.*
    [nodemon] starting `node index.js`
    module.js:341
        throw err;
        ^

    Error: Cannot find module '/home/jairomh/WORK/AllAboutNodejs/chatcat/index.js'
        at Function.Module._resolveFilename (module.js:339:15)
        at Function.Module._load (module.js:290:25)
        at Function.Module.runMain (module.js:447:10)
        at startup (node.js:139:18)
        at node.js:999:3
    [nodemon] app crashed - waiting for file changes before starting...

---The View Renderer--

EJS templating is preferable over Jade due to Jade's learning curve.

    name: 'John Doe' + <p><%= name %></p> = <p>John Doe</p>

chatcat$ npm install ejs@2.3.4 4 --save --save-exact

---Serving Static Assets---

Easily using middleware using app.use(express.static('public')).
Remove the . from src and href links.

---Express Router First Steps---

Express router is its own instance and a middleware.

app/index.js
    // router.get('/info', (req, res, next) => {
    //     res.send('Test page'); // Sends text to browser.
    // });

---Express Router: The routes object---

One can do more then one HTTP method(GET, POST, etc.) for a single route(see digram).

---Do we need a database? Yes we do!

Since HTTP is stateless sessions fills in the gap of persistence.

---MongoDB as a service | MongoLab.com---

mongodb://<dbuser>:<dbpassword>@ds147668.mlab.com:47668/chatcatjairodb

DB username: chatcatuser
Database passwd: password

---Accessing the Database---

Mongoose is an Object Data Mapper or ODM.
Makes it easy for nodeapp to talk to mongodb.
Mongoose brings in structure to a schemaless Mongodb world.
mongoosejs.com

---Sessions 101---

HTTP is stateless meaning every request is unique!
Sessions are data persistence. Different ways to build a sesion.
    - Request Parameters: Stored in DB on server and flagged to expire after specified time for security.
        /store/cat01/?user=sessionid002
    - Hidden Form Fields:  If you are making a POST request thru a form a hidden form field can be prepopulated with the unique session ID of the user
      who's logged in so that the next page or route of where the form is going to POST to knows who submitted the page.
    - Browser Cookie:  Session ID is stored in the user's browser as a session cookie. A cookie is a piece of data usually no bigger than 4KB that 
      a website can store in a user's browser and retrieve as necessary. In the case of a session cookie this data is usually stored in memory, 
      which means that if the user closes the browser window this data is purged and causes the session to expire since our code on the server wont 
      be abel to fetch the same session ID when the user reopens the browser and visits the secure route. This method is what Express uses.

    All these methods have advantages/disadvantages and not all are full proof.
    Other techniques like encrypting session ID can provide more security.

---Implementing sessions using the express-session middleware---

Express does NOT come with a built-in sessions manager.
You have to download module.

chatcat$ npm install express-session@1.12.1 --save --save-exact

Session data will be stored on our mongolab mongoDB.
Associated session ID to be stored in browser's cookie.

To have express-session module talk to mongoDB one needs connect-mongo. 
It is written in ES6 with a fallback in case you are using an older version of node.

chatcat$ npm install connect-mongo@1.1.0 --save --save-exact

Ensure we are the ones who originally created cookie and that data has not been tampered with.
to prevent a hacker from high-jacking a session cookie to gain access to secure routes in your app.
Use signed session cookies that have been encrypted using a hash or secret key, which only we
know as the owner of the app.

Session code written to app/session/index.js.
Add sessionSecret key to development.json and index.js.

app/config/development.json
    sessionSecret": "catscanfly"

app/config/index.js
    if (process.env.NODE_ENV === 'production') {
        // Offer production stage environment variables.
        module.exports = {
            host: process.env.host || "",
            dbURI: process.env.dbURI,
            sessionSecret: process.env.sessionSecret <---

The express-session is like any other middleware that plugs into the request and response.

---Social Authentication: Introduction to Passport---

facebook uses OAuth 2.0.
twitter uses older standard OAuth 1.0a.

---Social Authentication: Installing Passport & Strategies---

You can go passoprtjs.org to find comprehensive list of passport strategies.

chatcat$ npm install passport-facebook@2.0.0 --save --save-exact
chatcat$ npm install passport-twitter@1.0.3 --save --save-exact

---Social Authentication : Registering the app on Facebook---

Head to https://developers.facebook.com and login using your FB account.
Create a new app called 'chatCAT' and then place generated AppID and App secret like this in 

chatcat/app/config/development.json
    "fb": {
        "clientID": "148786205803792",
        "clientSecret": "8033c42f591391d3b643f59a8116a822",
        "callbackURL": "//localhost:3000/auth/facebook/callback", <--- Protocol independent http/https.
        "profileFields": ["id", "displayName", "photos"]
    }

In facebook developer page for the 'chatCat' app click 'Add Platform' and put this for 'Site URL' --> http://localhost:3000

Next, fill in 'Valid OAuth redirect URIs' with --> http://localhost:3000/auth/facebook/callback
    1) Go to Dashboard
    2) At bottom of left column Product Settings -> click +Add Product
    3) Add facebook Login.
    4) It will appear in the left column - click it there.
    5) And You will find Client OAuth Login on the right.

CRITICAL POINT:
    Before pushing app to Heroku or even git repo set your "clientID" and "clientSecret" to blank strings.

---Social Authentication: Facebook Strategy---

chatcat/app/auth/index.js
    'use strict';
    const passport = require('passport');
    const config = require('../config');
    const FacebookStrategy = require('passport-facebook').Strategy;

    module.exports = () => {

        let authProcessor = (accessToken, refreshToken, profile, done) => {
            // Find a user in local mongodb using profile.id.
            // If user is found return the user data using done().
            // If user profile is not found, create one in the local db and return.
        };

        // accessToken & refreshToken are provided by Facebook OAuth 2.0.
        // For Twitter Oauth 1.0 we are provided token sdn token secret instead.
        passport.use(new FacebookStrategy(config.fb, authProcessor));
    }

---Social Authentication Database Helpers---

app/db/index.js
    // Create a Schema that defines the structure for storing user data.
    const chatUser = new Mongoose.Schema({
        profiledId: String,
        fullName: String,
        profilePic: String
    });

    // Turn the schema into a useable model. Mongoose will create plural chatUsers collection on mongolab.
    let userModel = Mongoose.model('chatUser', chatUser);

    module.exports = {
        Mongoose,
        userModel

3:15